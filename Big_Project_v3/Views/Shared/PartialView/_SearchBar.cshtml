@* @model Big_Project_v3.Views.Shared.PartialView._SearchBarModel *@
@{
}
<link href="~/css/_SearchBar.css" rel="stylesheet">
<body>
    <!-- 主內容容器 -->
    <div class="container-fluid mt-4 p-0">
        <!-- 搜尋區域的外框 -->
        <div class="row justify-content-center">
            <!-- 使用 Bootstrap 的 row 和 justify-content-center 將內容置於容器中間 -->
            <div class="d-flex flex-column bg-dark text-white p-4 rounded">
                <!-- 搜尋表單區 -->
                <form class="search-bar">
                    <!-- 日期選擇 -->
                    <div class="input-group">
                        <span class="input-group-text bg-secondary text-white">
                            <i class="fa fa-calendar-alt"></i>
                        </span>
                        <input type="date" class="form-control" id="dateInput" onchange="updateAvailableTimes()">
                    </div>

                    <script>
                        // 設置今天的日期為最小日期
                        const today = new Date().toISOString().split("T")[0];
                        document.getElementById("dateInput").setAttribute("min", today);
                    </script>

                    <!-- 時間選擇 -->
                    <div class="input-group">
                        <span class="input-group-text bg-secondary text-white">
                            <i class="fa fa-clock"></i>
                        </span>
                        <select class="form-select" id="timeSelect">
                            <!-- JavaScript 會動態添加時間選項 -->
                        </select>
                    </div>

                    <script>
                        function updateAvailableTimes() {
                            const selectedDate = document.getElementById("dateInput").value;

                            fetch(`/SearchPage/GetAvailableTimes?selectedDate=${selectedDate}`)
                                .then(response => response.json())
                                .then(times => {
                                    const timeSelect = document.getElementById("timeSelect");
                                    timeSelect.innerHTML = "";

                                    times.forEach(time => {
                                        const option = document.createElement("option");
                                        option.value = time;
                                        option.textContent = time;
                                        timeSelect.appendChild(option);
                                    });
                                });
                        }

                        document.getElementById("dateInput").setAttribute("min", new Date().toISOString().split("T")[0]);
                    </script>

                    <!-- 人數選擇 -->
                    <div class="input-group">
                        <span class="input-group-text bg-secondary text-white">
                            <i class="fa fa-user"></i>
                        </span>
                        <select class="form-select" id="searchPeople"> <!-- 添加 id="searchPeople" -->
                            @for (int i = 1; i <= 20; i++)
                            {
                                <option value="@($"{i}位")">@($"{i}位")</option>
                            }
                        </select>
                    </div>

                    <!-- 關鍵字輸入框 -->
                    <div class="w-100 w-sm-50 w-md-33 w-lg-25 input-group">
                        <span class="input-group-text bg-secondary text-white">
                            <i class="fa fa-search"></i>
                        </span>
                        <input id="searchKeyword" name="keyword" type="text" class="form-control" placeholder="地點、餐廳或料理">
                    </div>

                    <!-- 搜尋按鈕 -->
                    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
                    <!-- 引入 Axios 庫，確保可以使用 axios -->

                    <button id="searchButton" type="button" onclick="searchRestaurants()" class="btn btn-danger w-50" style="display: block; margin-left: auto; margin-right: auto;">尋找餐廳</button>



                </form>
                @* 搜尋按鈕的方法與邏輯 *@
                <script>
                    function searchRestaurants() {
                        var keyword = document.getElementById("searchKeyword").value;
                        var date = document.getElementById("dateInput").value;
                        var time = document.getElementById("timeSelect").value;
                        var people = document.getElementById("searchPeople").value;

                        console.log("Search Parameters:", { keyword, date, time, people });

                        axios.get(`/SearchPage/SearchRestaurants?keyword=${encodeURIComponent(keyword)}&date=${encodeURIComponent(date)}&time=${encodeURIComponent(time)}&people=${encodeURIComponent(people)}`)
                            .then(function (response) {
                                // 確保 'searchResultsContainer' 存在
                                const container = document.getElementById('searchResultsContainer');
                                if (container) {
                                    container.innerHTML = response.data;
                                    resetDistrictFilters();
                                } else {
                                    console.error('找不到 searchResultsContainer 容器');
                                }
                            })
                            .catch(function (error) {
                                console.error("請求發生錯誤:", error);
                            });
                    }

                    function resetDistrictFilters() {
                        document.querySelectorAll('.form-check-input').forEach(function (checkbox) {
                            checkbox.checked = false;
                        });
                        console.log("所有地區篩選條件已重置");
                    }
                </script>

                <script>
                    // 初始化日期選擇器，設置今天為預設值
                    document.addEventListener('DOMContentLoaded', function () {
                        const dateInput = document.getElementById('dateInput');
                        const today = new Date();
                        const year = today.getFullYear();
                        const month = String(today.getMonth() + 1).padStart(2, '0');
                        const day = String(today.getDate()).padStart(2, '0');
                        dateInput.value = `${year}-${month}-${day}`;
                        dateInput.setAttribute('min', `${year}-${month}-${day}`);

                        updateAvailableTimes();

                        dateInput.addEventListener('change', updateAvailableTimes);
                    });
                </script>
            </div>
            <!-- 排序按鈕區 -->
            <div class="container">
                <div class="row align-items-center m-3">
                    <!-- 左側按鈕區域 -->
                    <div id="restaurant-item" class="col-auto">
                        <button class="btn btn-outline-primary me-2" onclick="sortByRating()">評分高低</button>
                        <button id="sortByDistanceButton" class="btn btn-outline-primary">距離遠近</button>
                    </div>

                    <script>
                        function sortByRating() {
                            const selectedDistricts = [];
                            document.querySelectorAll('.form-check-input:checked').forEach((checkbox) => {
                                selectedDistricts.push(checkbox.value);
                            });

                            const keyword = document.getElementById('searchKeyword')?.value || '';

                            axios.post('/SearchPage/SortByRating', {
                                keyword: keyword,
                                selectedDistricts: selectedDistricts
                            })
                            .then(function (response) {
                                const container = document.getElementById('searchResultsContainer');
                                if (container) {
                                    container.innerHTML = response.data;
                                } else {
                                    console.error('找不到 searchResultsContainer 容器');
                                }
                            })
                            .catch(function (error) {
                                console.error('Error:', error);
                                const container = document.getElementById('searchResultsContainer');
                                if (container) {
                                    container.innerHTML = '<p style="color: red;">排序失敗，請稍後再試。</p>';
                                }
                            });
                        }
                    </script>
                    <!-- 中間的地點提示文字 -->
                    <div class="col-9 text-center">
                        <p class="mb-0">
                            您現在的地點在台中市嗎？
                            <a href="#" id="getLocation" class="text-danger">
                                <i class="bi bi-geo-alt-fill"></i> 獲得現在地點
                            </a>
                        </p>
                        <p id="locationSection"></p>
                    </div>


                    <script>
                        // 台中市 29 區的經緯度範圍
                        const TaichungDistricts = [
                            { name: "中區", minLat: 24.1368, maxLat: 24.1445, minLng: 120.6760, maxLng: 120.6879 },
                            // ... 其他區域
                            { name: "大安區", minLat: 24.3600, maxLat: 24.4000, minLng: 120.5800, maxLng: 120.6400 },
                        ];

                        const getLocationBtn = document.getElementById("getLocation");
                        const locationSection = document.getElementById("locationSection");

                        getLocationBtn.addEventListener("click", (event) => {
                            event.preventDefault();

                            if (navigator.geolocation) {
                                locationSection.innerHTML = "正在取得您的位置...";
                                navigator.geolocation.getCurrentPosition(
                                    (position) => {
                                        const latitude = position.coords.latitude;
                                        const longitude = position.coords.longitude;

                                        const district = getDistrictFromCoordinates(latitude, longitude);

                                        if (district) {
                                            locationSection.innerHTML = `您目前的位置為：台中市${district}`;
                                        } else {
                                            locationSection.innerHTML = "您的位置不在台中市範圍內。";
                                        }

                                        sendLocationToServer(latitude, longitude);
                                    },
                                    (error) => {
                                        locationSection.innerHTML = "無法取得您的位置資訊，請檢查瀏覽器設定。";
                                    }
                                );
                            } else {
                                locationSection.innerHTML = "您的瀏覽器不支援地理定位功能。";
                            }
                        });

                        function getDistrictFromCoordinates(lat, lng) {
                            for (const district of TaichungDistricts) {
                                if (
                                    lat >= district.minLat &&
                                    lat <= district.maxLat &&
                                    lng >= district.minLng &&
                                    lng <= district.maxLng
                                ) {
                                    return district.name;
                                }
                            }
                            return null;
                        }

                        function sendLocationToServer(lat, lng) {
                            axios.post('/SearchPage/SaveUserLocation', {
                                latitude: lat,
                                longitude: lng
                            })
                            .then(response => {
                                console.log('伺服器回應:', response.data);
                            })
                            .catch(error => {
                                console.error('錯誤:', error);
                            });
                        }
                    </script>

                    <script>
                        // 通用函數：獲取經緯度並發送請求
                        function fetchRestaurantsByLocation(isSortingByDistance) {
                            navigator.geolocation.getCurrentPosition(
                                (position) => {
                                    const latitude = position.coords.latitude;
                                    const longitude = position.coords.longitude;

                                    axios.post('/SearchPage/SortRestaurantsByLocation', {
                                        latitude: latitude,
                                        longitude: longitude,
                                        sortByDistance: isSortingByDistance
                                    })
                                    .then(response => {
                                        const container = document.getElementById('searchResultsContainer');
                                        if (container) {
                                            container.innerHTML = response.data;
                                        } else {
                                            console.error('找不到 searchResultsContainer 容器');
                                        }
                                    })
                                    .catch(error => {
                                        console.error('發生錯誤:', error);
                                        alert('無法獲取餐廳列表，請稍後再試！');
                                    });
                                },
                                (error) => {
                                    console.error('地理位置獲取失敗:', error);
                                    alert("無法獲取您的位置，請檢查瀏覽器的定位設置！");
                                }
                            );
                        }

                        // 初始化：頁面載入時加載餐廳列表（預設按評分排序）
                        document.addEventListener('DOMContentLoaded', () => {
                            fetchRestaurantsByLocation(false);
                        });

                        // 綁定按鈕事件：按距離排序
                        const sortByDistanceButton = document.getElementById('sortByDistanceButton');
                        if (sortByDistanceButton) {
                            sortByDistanceButton.addEventListener('click', () => {
                                fetchRestaurantsByLocation(true);
                            });
                        } else {
                            console.error('無法找到按鈕，請檢查 HTML 結構。');
                        }
                    </script>

                </div>
            </div>
        </div>
    </div>
</body>
