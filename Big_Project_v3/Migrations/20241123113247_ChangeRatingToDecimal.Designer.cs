// <auto-generated />
using System;
using Big_Project_v3.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Big_Project_v3.Migrations
{
    [DbContext(typeof(ITableDbContext))]
    [Migration("20241123113247_ChangeRatingToDecimal")]
    partial class ChangeRatingToDecimal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Big_Project_v3.Models.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AnnouncementID")
                        .HasComment("公告的唯一識別碼，主鍵（PK），自動遞增。此欄位用於唯一標識每個公告紀錄，並在資料表之間建立關聯。");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnouncementId"));

                    b.Property<DateTime?>("AnnouncementDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("公告日期（前台 + 後台）。此欄位記錄公告的發布日期，用於排序和過濾。");

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("公告內容（前台 + 後台）。此欄位存儲公告的詳細內容，供前台用戶閱讀和後台管理。");

                    b.Property<DateTime?>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("公告建立時間（前台 + 後台）。此欄位記錄公告紀錄的建立時間，用於審計和管理。");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasComment("公告結束日期（前台 + 後台）。此欄位指定公告的結束日期，決定公告何時停止顯示。");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int")
                        .HasColumnName("RestaurantID")
                        .HasComment("餐廳ID，外鍵（FK）連結到 Restaurants 表（前台 + 後台）。此欄位指定該公告所屬的餐廳。");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasComment("公告開始日期（前台 + 後台）。此欄位指定公告的開始日期，決定公告何時開始顯示。");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("公告標題（前台 + 後台）。此欄位存儲公告的標題，用於前台顯示和後台管理。");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("公告更新時間（前台 + 後台）。此欄位記錄公告紀錄的最後更新時間，用於追蹤資料變更歷史。");

                    b.HasKey("AnnouncementId")
                        .HasName("PK__Announce__9DE44554BAAC7C0D");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Big_Project_v3.Models.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FavoriteID")
                        .HasComment("收藏的唯一識別碼，主鍵（PK），自動遞增。此欄位用於唯一標識每個收藏紀錄，並在資料表之間建立關聯。");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<DateTime?>("AddedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("收藏加入時間（前台 + 後台）。此欄位記錄收藏紀錄的加入時間，用於排序和管理。");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int")
                        .HasColumnName("RestaurantID")
                        .HasComment("餐廳ID，外鍵（FK）連結到 Restaurants 表（前台 + 後台）。此欄位指定收藏紀錄所屬的餐廳。");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID")
                        .HasComment("使用者ID，外鍵（FK）連結到 Users 表（前台 + 後台）。此欄位指定收藏紀錄所屬的使用者。");

                    b.HasKey("FavoriteId")
                        .HasName("PK__Favorite__CE74FAF5C3B335F2");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Big_Project_v3.Models.PasswordResetRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RequestID")
                        .HasComment("請求的唯一識別碼，主鍵（PK），自動遞增。此欄位用於唯一標識每個密碼重設請求，並在資料表之間建立關聯。");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("請求建立時間（前台 + 後台）。此欄位記錄密碼重設請求的建立時間，用於審計和管理。");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("令牌的過期時間（前台 + 後台）。此欄位指定密碼重設令牌的有效期限，超過此時間令牌將失效。");

                    b.Property<int?>("RestaurantUserId")
                        .HasColumnType("int")
                        .HasColumnName("RestaurantUserID")
                        .HasComment("餐廳管理者ID，外鍵（FK）連結到 RestaurantUsers 表（前台 + 後台）。此欄位指定發起密碼重設請求的餐廳管理者。");

                    b.Property<string>("Token")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("密碼重設的唯一令牌（前台 + 後台）。此欄位存儲用於驗證和完成密碼重設的唯一標識符。");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID")
                        .HasComment("使用者ID，外鍵（FK）連結到 Users 表（前台 + 後台）。此欄位指定發起密碼重設請求的使用者。");

                    b.HasKey("RequestId")
                        .HasName("PK__Password__33A8519A20229840");

                    b.HasIndex("RestaurantUserId");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetRequests");
                });

            modelBuilder.Entity("Big_Project_v3.Models.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhotoID")
                        .HasComment("相片的唯一識別碼，主鍵（PK），自動遞增。此欄位用於唯一標識每個相片紀錄，並在資料表之間建立關聯。");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("相片描述（前台 + 後台）。此欄位提供對相片的詳細描述，幫助前台用戶理解相片內容。");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhotoType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("相片類型（例如：餐廳環境、菜單）（前台 + 後台）。此欄位描述相片的類型，方便分類和管理。");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("PhotoURL")
                        .HasComment("相片的 URL 或存儲路徑（前台 + 後台）。此欄位存儲相片的網路地址或在伺服器上的存儲路徑，用於前台顯示和管理。");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int")
                        .HasColumnName("RestaurantID")
                        .HasComment("餐廳ID，外鍵（FK）連結到 Restaurants 表（前台 + 後台）。此欄位指定該相片所屬的餐廳。");

                    b.Property<DateTime?>("UploadedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("相片上傳時間（前台 + 後台）。此欄位記錄相片的上傳時間，用於管理和排序相片。");

                    b.HasKey("PhotoId")
                        .HasName("PK__Photos__21B7B582A613A938");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Big_Project_v3.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReservationID")
                        .HasComment("訂位的唯一識別碼，主鍵（PK），自動遞增。此欄位用於唯一標識每個訂位紀錄，並在資料表之間建立關聯。");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<string>("BookerEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("訂位人電子郵件（前台 + 後台）。此欄位存儲發起訂位的使用者電子郵件地址，用於確認和聯絡。");

                    b.Property<string>("BookerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("訂位人姓名（前台 + 後台）。此欄位存儲發起訂位的使用者姓名，用於確認和聯絡。");

                    b.Property<string>("BookerPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("訂位人電話（前台 + 後台）。此欄位存儲發起訂位的使用者電話號碼，用於確認和聯絡。");

                    b.Property<DateTime?>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("訂位建立時間（前台 + 後台）。此欄位記錄訂位紀錄的建立時間，用於審計和管理。");

                    b.Property<int?>("NumAdults")
                        .HasColumnType("int")
                        .HasComment("大人人數（前台 + 後台）。此欄位指定訂位時預定的大人人數，用於餐廳準備座位和資源。");

                    b.Property<int?>("NumChildren")
                        .HasColumnType("int")
                        .HasComment("小孩人數（前台 + 後台）。此欄位指定訂位時預定的小孩人數，用於餐廳準備座位和資源。");

                    b.Property<DateOnly?>("ReservationDate")
                        .HasColumnType("date")
                        .HasComment("訂位日期（前台 + 後台）。此欄位指定訂位的日期，用於安排和管理。");

                    b.Property<string>("ReservationStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("訂位狀態（例如：已確認、已取消）（前台 + 後台）。此欄位指示訂位的當前狀態，方便管理和追蹤。");

                    b.Property<TimeOnly?>("ReservationTime")
                        .HasPrecision(0)
                        .HasColumnType("time(0)")
                        .HasComment("訂位時間（前台 + 後台）。此欄位指定訂位的具體時間，用於安排和管理。");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int")
                        .HasColumnName("RestaurantID")
                        .HasComment("餐廳ID，外鍵（FK）連結到 Restaurants 表（前台 + 後台）。此欄位指定訂位所屬的餐廳。");

                    b.Property<string>("SpecialRequests")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("特殊要求備註（前台 + 後台）。此欄位存儲使用者對訂位的特殊要求或備註，如過敏資訊、座位偏好等。");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("訂位更新時間（前台 + 後台）。此欄位記錄訂位紀錄的最後更新時間，用於追蹤資料變更歷史。");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID")
                        .HasComment("使用者ID，外鍵（FK）連結到 Users 表（前台 + 後台）。此欄位指定訂位的使用者。");

                    b.HasKey("ReservationId")
                        .HasName("PK__Reservat__B7EE5F04056C88C4");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Big_Project_v3.Models.ReservationControlSetting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SettingID")
                        .HasComment("設定的唯一識別碼，主鍵（PK），自動遞增。此欄位用於唯一標識每個訂位控管設定，並在資料表之間建立關聯。");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingId"));

                    b.Property<int?>("AdvanceBookingDays")
                        .HasColumnType("int")
                        .HasComment("開放預訂的天數（後台）。此欄位指定餐廳允許提前預訂的天數範圍，用於限制預訂的時間跨度。");

                    b.Property<string>("AvailableTimeSlots")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("可預訂的時段區間（JSON 格式）（後台）。此欄位存儲餐廳可接受預訂的具體時段，以 JSON 格式表示，方便靈活管理。");

                    b.Property<int?>("CloseBookingBeforeHours")
                        .HasColumnType("int")
                        .HasComment("關閉預訂的提前小時數（後台）。此欄位指定餐廳在預訂前需提前關閉訂位的時間，用於確保餐廳有足夠的準備時間。");

                    b.Property<DateTime?>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("設定建立時間。此欄位記錄訂位控管設定紀錄的建立時間，用於審計和管理。");

                    b.Property<int?>("MaxPeoplePerReservation")
                        .HasColumnType("int")
                        .HasComment("每次訂位最多人數（後台）。此欄位指定每次訂位所允許的最大人數，用於控制訂位的規模。");

                    b.Property<int?>("MaxReservationsPerAccount")
                        .HasColumnType("int")
                        .HasComment("每個帳號限訂位次數（後台）。此欄位指定每個使用者帳號可進行的訂位次數上限，用於防止濫用預訂系統。");

                    b.Property<int?>("MinPeoplePerReservation")
                        .HasColumnType("int")
                        .HasComment("每次訂位最少人數（後台）。此欄位指定每次訂位所需的最少人數，用於控制訂位的規模。");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int")
                        .HasColumnName("RestaurantID")
                        .HasComment("餐廳ID，外鍵（FK）連結到 Restaurants 表（後台）。此欄位指定訂位控管設定所屬的餐廳。");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("設定更新時間。此欄位記錄訂位控管設定紀錄的最後更新時間，用於追蹤資料變更歷史。");

                    b.HasKey("SettingId")
                        .HasName("PK__Reservat__54372AFD70E74078");

                    b.HasIndex("RestaurantId");

                    b.ToTable("ReservationControlSettings");
                });

            modelBuilder.Entity("Big_Project_v3.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RestaurantID")
                        .HasComment("餐廳的唯一識別碼，主鍵（PK），自動遞增。此欄位用於唯一標識每個餐廳，並在資料表之間建立關聯。");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("餐廳地址（前台 + 後台）。此欄位存儲餐廳的實體地址，用於定位和導航。");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float")
                        .HasComment("餐廳的平均評分（前台 + 後台）。此欄位存儲餐廳的平均客戶評分，供客戶參考和比較。");

                    b.Property<TimeOnly?>("BusinessHoursEnd")
                        .HasPrecision(0)
                        .HasColumnType("time(0)")
                        .HasComment("營業結束時間");

                    b.Property<TimeOnly?>("BusinessHoursStart")
                        .HasPrecision(0)
                        .HasColumnType("time(0)")
                        .HasComment("營業開始時間");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("聯絡電話（前台 + 後台）。此欄位存儲餐廳的聯絡電話號碼，用於客戶諮詢和緊急聯絡。");

                    b.Property<DateTime?>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("餐廳資料建立時間（前台 + 後台）。此欄位記錄餐廳資料的建立時間，用於審計和管理。");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("餐廳簡介（前台 + 後台）。此欄位存儲餐廳的詳細介紹，包括特色、歷史等資訊，供客戶參考。");

                    b.Property<string>("GoogleMapAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("HasParking")
                        .HasColumnType("bit")
                        .HasComment("是否有停車場（1：有，0：無）（前台 + 後台）。此欄位指示餐廳是否提供停車設施，供客戶參考。");

                    b.Property<bool>("IsReservationOpen")
                        .HasColumnType("bit")
                        .HasComment("是否開放預訂（1：開放，0：關閉）（前台 + 後台）。此欄位指示餐廳是否接受預訂，供客戶決定是否進行預約。");

                    b.Property<TimeOnly?>("LastCheckInTime")
                        .HasPrecision(0)
                        .HasColumnType("time(0)")
                        .HasComment("最後收客時間（可為空）");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("餐廳名稱（前台 + 後台）。此欄位存儲餐廳的名稱，用於顯示和管理。");

                    b.Property<string>("PriceRange")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("餐廳資料更新時間（前台 + 後台）。此欄位記錄餐廳資料的最後更新時間，用於追蹤資料變更歷史。");

                    b.HasKey("RestaurantId")
                        .HasName("PK__Restaura__87454CB5BA430447");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("Big_Project_v3.Models.RestaurantAvailability", b =>
                {
                    b.Property<int>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AvailabilityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailabilityId"));

                    b.Property<int?>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int")
                        .HasColumnName("RestaurantID");

                    b.Property<TimeOnly?>("TimeSlot")
                        .HasPrecision(0)
                        .HasColumnType("time(0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("資料更新時間（前台 + 後台）。此欄位記錄可用時段紀錄的最後更新時間，用於追蹤資料變更歷史。");

                    b.HasKey("AvailabilityId")
                        .HasName("PK__Restaura__DA397991CBB3FACB");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantAvailability", (string)null);
                });

            modelBuilder.Entity("Big_Project_v3.Models.RestaurantUser", b =>
                {
                    b.Property<int>("RestaurantUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RestaurantUserID")
                        .HasComment("餐廳管理者的唯一識別碼，主鍵（PK），自動遞增。此欄位用於唯一標識每個餐廳管理者，並在資料表之間建立關聯。");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantUserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("帳號建立時間（前台 + 後台）。此欄位記錄餐廳管理者帳號的建立時間，用於審計和管理。");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("登入電子郵件（前台 + 後台）。此欄位存儲餐廳管理者的電子郵件地址，用於登入和通信。");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ManagerID")
                        .HasComment("登入及顯示名稱（前台 + 後台）。此欄位用於餐廳管理者的登入名稱及在系統中的顯示名稱，方便識別和管理。");

                    b.Property<string>("ManagerPosition")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("管理人員的職位（前台 + 後台）。此欄位描述餐廳管理者的職位，如店長、經理等，用於角色識別和權限管理。");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("手機號碼（前台 + 後台）。此欄位存儲餐廳管理者的手機號碼，用於緊急聯絡和通知。");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("密碼的哈希值（前台 + 後台）。此欄位存儲餐廳管理者密碼的加密哈希值，確保密碼的安全性。");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int")
                        .HasColumnName("RestaurantID")
                        .HasComment("餐廳ID，外鍵（FK）連結到 Restaurants 表（前台 + 後台）。此欄位指定該管理者所屬的餐廳。");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("帳號更新時間（前台 + 後台）。此欄位記錄餐廳管理者帳號的最後更新時間，用於追蹤帳號變更歷史。");

                    b.HasKey("RestaurantUserId")
                        .HasName("PK__Restaura__380CADFAF95FB251");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantUsers");
                });

            modelBuilder.Entity("Big_Project_v3.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewID")
                        .HasComment("評論的唯一識別碼，主鍵（PK），自動遞增。此欄位用於唯一標識每個評論紀錄，並在資料表之間建立關聯。");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("評論建立時間（前台 + 後台）。此欄位記錄評論紀錄的建立時間，用於審計和管理。");

                    b.Property<double?>("Rating")
                        .HasColumnType("float")
                        .HasComment("評分（1-5 星）（前台 + 後台）。此欄位存儲使用者對餐廳的評分，用於計算平均評分和顯示給其他用戶。");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int")
                        .HasColumnName("RestaurantID")
                        .HasComment("餐廳ID，外鍵（FK）連結到 Restaurants 表（前台 + 後台）。此欄位指定評論所屬的餐廳。");

                    b.Property<DateOnly?>("ReviewDate")
                        .HasColumnType("date")
                        .HasComment("評論日期（前台 + 後台）。此欄位記錄評論的發表日期，用於排序和顯示。");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("評論內容（前台 + 後台）。此欄位存儲使用者對餐廳的詳細評論，用於提供其他用戶參考。");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("評論更新時間（前台 + 後台）。此欄位記錄評論紀錄的最後更新時間，用於追蹤資料變更歷史。");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID")
                        .HasComment("使用者ID，外鍵（FK）連結到 Users 表（前台 + 後台）。此欄位指定發表評論的使用者。");

                    b.HasKey("ReviewId")
                        .HasName("PK__Reviews__74BC79AE826B3A68");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Big_Project_v3.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID")
                        .HasComment("使用者的唯一識別碼，主鍵（PK），自動遞增");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("聯絡電子郵件");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("聯絡電話");

                    b.Property<DateTime?>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("帳號建立時間");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("使用者姓名");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("密碼的哈希值");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("帳號更新時間");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("用於登入的帳號名稱");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC6D3159D6");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Big_Project_v3.Models.Announcement", b =>
                {
                    b.HasOne("Big_Project_v3.Models.Restaurant", "Restaurant")
                        .WithMany("Announcements")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK_Announcements_Restaurants");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Big_Project_v3.Models.Favorite", b =>
                {
                    b.HasOne("Big_Project_v3.Models.Restaurant", "Restaurant")
                        .WithMany("Favorites")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK_Favorites_Restaurants");

                    b.HasOne("Big_Project_v3.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Favorites_Users");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Big_Project_v3.Models.PasswordResetRequest", b =>
                {
                    b.HasOne("Big_Project_v3.Models.RestaurantUser", "RestaurantUser")
                        .WithMany("PasswordResetRequests")
                        .HasForeignKey("RestaurantUserId")
                        .HasConstraintName("FK_PasswordResetRequests_RestaurantUsers");

                    b.HasOne("Big_Project_v3.Models.User", "User")
                        .WithMany("PasswordResetRequests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PasswordResetRequests_Users");

                    b.Navigation("RestaurantUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Big_Project_v3.Models.Photo", b =>
                {
                    b.HasOne("Big_Project_v3.Models.Restaurant", "Restaurant")
                        .WithMany("Photos")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK_Photos_Restaurants");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Big_Project_v3.Models.Reservation", b =>
                {
                    b.HasOne("Big_Project_v3.Models.Restaurant", "Restaurant")
                        .WithMany("Reservations")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK_Reservations_Restaurants");

                    b.HasOne("Big_Project_v3.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Reservations_Users");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Big_Project_v3.Models.ReservationControlSetting", b =>
                {
                    b.HasOne("Big_Project_v3.Models.Restaurant", "Restaurant")
                        .WithMany("ReservationControlSettings")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK_ReservationControlSettings_Restaurants");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Big_Project_v3.Models.RestaurantAvailability", b =>
                {
                    b.HasOne("Big_Project_v3.Models.Restaurant", "Restaurant")
                        .WithMany("RestaurantAvailabilities")
                        .HasForeignKey("RestaurantId")
                        .IsRequired()
                        .HasConstraintName("FK_RestaurantAvailability_Restaurants");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Big_Project_v3.Models.RestaurantUser", b =>
                {
                    b.HasOne("Big_Project_v3.Models.Restaurant", "Restaurant")
                        .WithMany("RestaurantUsers")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK_RestaurantUsers_Restaurants");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Big_Project_v3.Models.Review", b =>
                {
                    b.HasOne("Big_Project_v3.Models.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK_Reviews_Restaurants");

                    b.HasOne("Big_Project_v3.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Reviews_Users");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Big_Project_v3.Models.Restaurant", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Favorites");

                    b.Navigation("Photos");

                    b.Navigation("ReservationControlSettings");

                    b.Navigation("Reservations");

                    b.Navigation("RestaurantAvailabilities");

                    b.Navigation("RestaurantUsers");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Big_Project_v3.Models.RestaurantUser", b =>
                {
                    b.Navigation("PasswordResetRequests");
                });

            modelBuilder.Entity("Big_Project_v3.Models.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("PasswordResetRequests");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
